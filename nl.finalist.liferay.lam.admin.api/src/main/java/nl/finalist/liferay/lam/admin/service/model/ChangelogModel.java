/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package nl.finalist.liferay.lam.admin.service.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the Changelog service. Represents a row in the &quot;LAM_Changelog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link nl.finalist.liferay.lam.admin.service.model.impl.ChangelogModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link nl.finalist.liferay.lam.admin.service.model.impl.ChangelogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Changelog
 * @see nl.finalist.liferay.lam.admin.service.model.impl.ChangelogImpl
 * @see nl.finalist.liferay.lam.admin.service.model.impl.ChangelogModelImpl
 * @generated
 */
@ProviderType
public interface ChangelogModel extends BaseModel<Changelog> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a changelog model instance should use the {@link Changelog} interface instead.
	 */

	/**
	 * Returns the primary key of this changelog.
	 *
	 * @return the primary key of this changelog
	 */
	public int getPrimaryKey();

	/**
	 * Sets the primary key of this changelog.
	 *
	 * @param primaryKey the primary key of this changelog
	 */
	public void setPrimaryKey(int primaryKey);

	/**
	 * Returns the installed_rank of this changelog.
	 *
	 * @return the installed_rank of this changelog
	 */
	public int getInstalled_rank();

	/**
	 * Sets the installed_rank of this changelog.
	 *
	 * @param installed_rank the installed_rank of this changelog
	 */
	public void setInstalled_rank(int installed_rank);

	/**
	 * Returns the version of this changelog.
	 *
	 * @return the version of this changelog
	 */
	public int getVersion();

	/**
	 * Sets the version of this changelog.
	 *
	 * @param version the version of this changelog
	 */
	public void setVersion(int version);

	/**
	 * Returns the description of this changelog.
	 *
	 * @return the description of this changelog
	 */
	@AutoEscape
	public String getDescription();

	/**
	 * Sets the description of this changelog.
	 *
	 * @param description the description of this changelog
	 */
	public void setDescription(String description);

	/**
	 * Returns the type of this changelog.
	 *
	 * @return the type of this changelog
	 */
	@AutoEscape
	public String getType();

	/**
	 * Sets the type of this changelog.
	 *
	 * @param type the type of this changelog
	 */
	public void setType(String type);

	/**
	 * Returns the checksum of this changelog.
	 *
	 * @return the checksum of this changelog
	 */
	public int getChecksum();

	/**
	 * Sets the checksum of this changelog.
	 *
	 * @param checksum the checksum of this changelog
	 */
	public void setChecksum(int checksum);

	/**
	 * Returns the installed_by of this changelog.
	 *
	 * @return the installed_by of this changelog
	 */
	@AutoEscape
	public String getInstalled_by();

	/**
	 * Sets the installed_by of this changelog.
	 *
	 * @param installed_by the installed_by of this changelog
	 */
	public void setInstalled_by(String installed_by);

	/**
	 * Returns the installed_on of this changelog.
	 *
	 * @return the installed_on of this changelog
	 */
	public Date getInstalled_on();

	/**
	 * Sets the installed_on of this changelog.
	 *
	 * @param installed_on the installed_on of this changelog
	 */
	public void setInstalled_on(Date installed_on);

	/**
	 * Returns the execution_time of this changelog.
	 *
	 * @return the execution_time of this changelog
	 */
	public int getExecution_time();

	/**
	 * Sets the execution_time of this changelog.
	 *
	 * @param execution_time the execution_time of this changelog
	 */
	public void setExecution_time(int execution_time);

	/**
	 * Returns the success of this changelog.
	 *
	 * @return the success of this changelog
	 */
	public boolean getSuccess();

	/**
	 * Returns <code>true</code> if this changelog is success.
	 *
	 * @return <code>true</code> if this changelog is success; <code>false</code> otherwise
	 */
	public boolean isSuccess();

	/**
	 * Sets whether this changelog is success.
	 *
	 * @param success the success of this changelog
	 */
	public void setSuccess(boolean success);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(Changelog changelog);

	@Override
	public int hashCode();

	@Override
	public CacheModel<Changelog> toCacheModel();

	@Override
	public Changelog toEscapedModel();

	@Override
	public Changelog toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}