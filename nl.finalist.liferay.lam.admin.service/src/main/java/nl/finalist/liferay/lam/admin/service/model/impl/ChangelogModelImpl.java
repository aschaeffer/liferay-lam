/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package nl.finalist.liferay.lam.admin.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import nl.finalist.liferay.lam.admin.service.model.Changelog;
import nl.finalist.liferay.lam.admin.service.model.ChangelogModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Changelog service. Represents a row in the &quot;LAM_Changelog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ChangelogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ChangelogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ChangelogImpl
 * @see Changelog
 * @see ChangelogModel
 * @generated
 */
@ProviderType
public class ChangelogModelImpl extends BaseModelImpl<Changelog>
	implements ChangelogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a changelog model instance should use the {@link Changelog} interface instead.
	 */
	public static final String TABLE_NAME = "LAM_Changelog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "installed_rank", Types.INTEGER },
			{ "version", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "type", Types.VARCHAR },
			{ "checksum", Types.INTEGER },
			{ "script", Types.VARCHAR },
			{ "installed_by", Types.VARCHAR },
			{ "installed_on", Types.TIMESTAMP },
			{ "execution_time", Types.INTEGER },
			{ "success", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("installed_rank", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("version", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("checksum", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("script", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("installed_by", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("installed_on", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("execution_time", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("success", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table LAM_Changelog (installed_rank INTEGER not null primary key,version VARCHAR(75) null,description VARCHAR(75) null,type VARCHAR(75) null,checksum INTEGER,script VARCHAR(75) null,installed_by VARCHAR(75) null,installed_on DATE null,execution_time INTEGER,success BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table LAM_Changelog";
	public static final String ORDER_BY_JPQL = " ORDER BY changelog.installed_rank ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LAM_Changelog.installed_rank ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(nl.finalist.liferay.lam.admin.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.nl.finalist.liferay.lam.admin.service.model.Changelog"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(nl.finalist.liferay.lam.admin.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.nl.finalist.liferay.lam.admin.service.model.Changelog"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(nl.finalist.liferay.lam.admin.service.util.PropsUtil.get(
				"lock.expiration.time.nl.finalist.liferay.lam.admin.service.model.Changelog"));

	public ChangelogModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _installed_rank;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setInstalled_rank(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _installed_rank;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Changelog.class;
	}

	@Override
	public String getModelClassName() {
		return Changelog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("installed_rank", getInstalled_rank());
		attributes.put("version", getVersion());
		attributes.put("description", getDescription());
		attributes.put("type", getType());
		attributes.put("checksum", getChecksum());
		attributes.put("script", getScript());
		attributes.put("installed_by", getInstalled_by());
		attributes.put("installed_on", getInstalled_on());
		attributes.put("execution_time", getExecution_time());
		attributes.put("success", getSuccess());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer installed_rank = (Integer)attributes.get("installed_rank");

		if (installed_rank != null) {
			setInstalled_rank(installed_rank);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		Integer checksum = (Integer)attributes.get("checksum");

		if (checksum != null) {
			setChecksum(checksum);
		}

		String script = (String)attributes.get("script");

		if (script != null) {
			setScript(script);
		}

		String installed_by = (String)attributes.get("installed_by");

		if (installed_by != null) {
			setInstalled_by(installed_by);
		}

		Date installed_on = (Date)attributes.get("installed_on");

		if (installed_on != null) {
			setInstalled_on(installed_on);
		}

		Integer execution_time = (Integer)attributes.get("execution_time");

		if (execution_time != null) {
			setExecution_time(execution_time);
		}

		Boolean success = (Boolean)attributes.get("success");

		if (success != null) {
			setSuccess(success);
		}
	}

	@Override
	public int getInstalled_rank() {
		return _installed_rank;
	}

	@Override
	public void setInstalled_rank(int installed_rank) {
		_installed_rank = installed_rank;
	}

	@Override
	public String getVersion() {
		if (_version == null) {
			return StringPool.BLANK;
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_version = version;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@Override
	public int getChecksum() {
		return _checksum;
	}

	@Override
	public void setChecksum(int checksum) {
		_checksum = checksum;
	}

	@Override
	public String getScript() {
		if (_script == null) {
			return StringPool.BLANK;
		}
		else {
			return _script;
		}
	}

	@Override
	public void setScript(String script) {
		_script = script;
	}

	@Override
	public String getInstalled_by() {
		if (_installed_by == null) {
			return StringPool.BLANK;
		}
		else {
			return _installed_by;
		}
	}

	@Override
	public void setInstalled_by(String installed_by) {
		_installed_by = installed_by;
	}

	@Override
	public Date getInstalled_on() {
		return _installed_on;
	}

	@Override
	public void setInstalled_on(Date installed_on) {
		_installed_on = installed_on;
	}

	@Override
	public int getExecution_time() {
		return _execution_time;
	}

	@Override
	public void setExecution_time(int execution_time) {
		_execution_time = execution_time;
	}

	@Override
	public boolean getSuccess() {
		return _success;
	}

	@Override
	public boolean isSuccess() {
		return _success;
	}

	@Override
	public void setSuccess(boolean success) {
		_success = success;
	}

	@Override
	public Changelog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Changelog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ChangelogImpl changelogImpl = new ChangelogImpl();

		changelogImpl.setInstalled_rank(getInstalled_rank());
		changelogImpl.setVersion(getVersion());
		changelogImpl.setDescription(getDescription());
		changelogImpl.setType(getType());
		changelogImpl.setChecksum(getChecksum());
		changelogImpl.setScript(getScript());
		changelogImpl.setInstalled_by(getInstalled_by());
		changelogImpl.setInstalled_on(getInstalled_on());
		changelogImpl.setExecution_time(getExecution_time());
		changelogImpl.setSuccess(getSuccess());

		changelogImpl.resetOriginalValues();

		return changelogImpl;
	}

	@Override
	public int compareTo(Changelog changelog) {
		int primaryKey = changelog.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Changelog)) {
			return false;
		}

		Changelog changelog = (Changelog)obj;

		int primaryKey = changelog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Changelog> toCacheModel() {
		ChangelogCacheModel changelogCacheModel = new ChangelogCacheModel();

		changelogCacheModel.installed_rank = getInstalled_rank();

		changelogCacheModel.version = getVersion();

		String version = changelogCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			changelogCacheModel.version = null;
		}

		changelogCacheModel.description = getDescription();

		String description = changelogCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			changelogCacheModel.description = null;
		}

		changelogCacheModel.type = getType();

		String type = changelogCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			changelogCacheModel.type = null;
		}

		changelogCacheModel.checksum = getChecksum();

		changelogCacheModel.script = getScript();

		String script = changelogCacheModel.script;

		if ((script != null) && (script.length() == 0)) {
			changelogCacheModel.script = null;
		}

		changelogCacheModel.installed_by = getInstalled_by();

		String installed_by = changelogCacheModel.installed_by;

		if ((installed_by != null) && (installed_by.length() == 0)) {
			changelogCacheModel.installed_by = null;
		}

		Date installed_on = getInstalled_on();

		if (installed_on != null) {
			changelogCacheModel.installed_on = installed_on.getTime();
		}
		else {
			changelogCacheModel.installed_on = Long.MIN_VALUE;
		}

		changelogCacheModel.execution_time = getExecution_time();

		changelogCacheModel.success = getSuccess();

		return changelogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{installed_rank=");
		sb.append(getInstalled_rank());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", checksum=");
		sb.append(getChecksum());
		sb.append(", script=");
		sb.append(getScript());
		sb.append(", installed_by=");
		sb.append(getInstalled_by());
		sb.append(", installed_on=");
		sb.append(getInstalled_on());
		sb.append(", execution_time=");
		sb.append(getExecution_time());
		sb.append(", success=");
		sb.append(getSuccess());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("nl.finalist.liferay.lam.admin.service.model.Changelog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>installed_rank</column-name><column-value><![CDATA[");
		sb.append(getInstalled_rank());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checksum</column-name><column-value><![CDATA[");
		sb.append(getChecksum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>script</column-name><column-value><![CDATA[");
		sb.append(getScript());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>installed_by</column-name><column-value><![CDATA[");
		sb.append(getInstalled_by());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>installed_on</column-name><column-value><![CDATA[");
		sb.append(getInstalled_on());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>execution_time</column-name><column-value><![CDATA[");
		sb.append(getExecution_time());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>success</column-name><column-value><![CDATA[");
		sb.append(getSuccess());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Changelog.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Changelog.class
		};
	private int _installed_rank;
	private String _version;
	private String _description;
	private String _type;
	private int _checksum;
	private String _script;
	private String _installed_by;
	private Date _installed_on;
	private int _execution_time;
	private boolean _success;
	private Changelog _escapedModel;
}